{"version":3,"file":"psn-api.cjs.production.min.js","sources":["../src/authenticate/AUTH_BASE_URL.ts","../src/models/trophy-rarity.model.ts","../src/authenticate/exchangeAccessCodeForAuthTokens.ts","../src/authenticate/exchangeNpssoForAccessCode.ts","../src/authenticate/exchangeRefreshTokenForAuthTokens.ts","../src/utils/call.ts","../src/graphql/getRecentlyPlayedGames.ts","../src/graphql/GRAPHQL_BASE_URL.ts","../src/graphql/operationHashes.ts","../src/utils/buildRequestUrl.ts","../src/search/makeUniversalSearch.ts","../src/search/SEARCH_BASE_URL.ts","../src/trophy/TROPHY_BASE_URL.ts","../src/trophy/title/getTitleTrophies.ts","../src/trophy/title/getTitleTrophyGroups.ts","../src/trophy/user/getUserTitles.ts","../src/trophy/user/getUserTrophiesEarnedForTitle.ts","../src/trophy/user/getUserTrophiesForSpecificTitle.ts","../src/trophy/user/getUserTrophyGroupEarningsForTitle.ts","../src/trophy/user/getUserTrophyProfileSummary.ts","../src/user/USER_BASE_URL.ts","../src/user/getAccountDevices.ts","../src/user/getBasicPresence.ts","../src/user/getProfileFromAccountId.ts","../src/user/getProfileFromUserName.ts","../src/user/getProfileShareableLink.ts","../src/user/getUserFriendsAccountIds.ts","../src/user/getUserPlayedGames.ts","../src/utils/extractRegionFromNpId.ts","../src/utils/decodeBase64.ts","../src/user/getUserRegion.ts"],"sourcesContent":["export const AUTH_BASE_URL = \"https://ca.account.sony.com/api/authz/v3/oauth\";\n","export enum TrophyRarity {\n  UltraRare,\n  VeryRare,\n  Rare,\n  Common\n}\n","import fetch from \"isomorphic-unfetch\";\n\nimport type { AuthTokensResponse } from \"../models\";\nimport { AUTH_BASE_URL } from \"./AUTH_BASE_URL\";\n\n/**\n * @param accessCode Your access code, typically retrieved by using `exchangeNpssoForAccessCode()`.\n * @returns An object containing an access token, refresh token, and expiry times for both.\n */\nexport const exchangeAccessCodeForAuthTokens = async (\n  accessCode: string\n): Promise<AuthTokensResponse> => {\n  const requestUrl = `${AUTH_BASE_URL}/token`;\n\n  const res = await fetch(requestUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization:\n        \"Basic MDk1MTUxNTktNzIzNy00MzcwLTliNDAtMzgwNmU2N2MwODkxOnVjUGprYTV0bnRCMktxc1A=\"\n    },\n    body: new URLSearchParams({\n      code: accessCode,\n      redirect_uri: \"com.scee.psxandroid.scecompcall://redirect\",\n      grant_type: \"authorization_code\",\n      token_format: \"jwt\"\n    }).toString()\n  });\n\n  const raw = await res.json();\n\n  return {\n    accessToken: raw.access_token,\n    expiresIn: raw.expires_in,\n    idToken: raw.id_token,\n    refreshToken: raw.refresh_token,\n    refreshTokenExpiresIn: raw.refresh_token_expires_in,\n    scope: raw.scope,\n    tokenType: raw.token_type\n  };\n};\n\n/**\n * @deprecated Use `exchangeAccessCodeForAuthTokens` instead. This alias will be removed in a future version.\n */\nexport const exchangeCodeForAccessToken = exchangeAccessCodeForAuthTokens;\n","import fetch from \"isomorphic-unfetch\";\n\nimport { AUTH_BASE_URL } from \"./AUTH_BASE_URL\";\n\n/**\n *\n * @param npssoToken Your NPSSO token, retrieved from https://ca.account.sony.com/api/v1/ssocookie\n * @returns An access code, which can be exchanged for an access token using `exchangeAccessCodeForAuthTokens`.\n * @example\n * ```ts\n * const code = await exchangeNpssoForAccessCode(\"myNpssoToken\");\n *\n * console.log(code) // --> \"v3.XXXXXX\"\n * ```\n */\nexport const exchangeNpssoForAccessCode = async (\n  npssoToken: string\n): Promise<string> => {\n  const queryString = new URLSearchParams({\n    access_type: \"offline\",\n    client_id: \"09515159-7237-4370-9b40-3806e67c0891\",\n    redirect_uri: \"com.scee.psxandroid.scecompcall://redirect\",\n    response_type: \"code\",\n    scope: \"psn:mobile.v2.core psn:clientapp\"\n  }).toString();\n\n  const requestUrl = `${AUTH_BASE_URL}/authorize?${queryString}`;\n\n  // This never returns a 200. As of Oct 10 2021, it seems to return a 302.\n  const { headers: responseHeaders } = await fetch(requestUrl, {\n    headers: {\n      Cookie: `npsso=${npssoToken}`\n    },\n    redirect: \"manual\"\n  });\n\n  // The access code itself is stored in a header on the response.\n  // We'll perform a few validations to ensure it's actually there.\n  if (\n    !responseHeaders.has(\"location\") ||\n    !responseHeaders.get(\"location\")?.includes(\"?code=\")\n  ) {\n    throw new Error(`\n      There was a problem retrieving your PSN access code. Is your NPSSO code valid?\n      To get a new NPSSO code, visit https://ca.account.sony.com/api/v1/ssocookie.\n    `);\n  }\n\n  const redirectLocation = responseHeaders.get(\"location\") as string;\n  const redirectParams = new URLSearchParams(\n    redirectLocation.split(\"redirect/\")[1]\n  );\n\n  return redirectParams.get(\"code\") as string;\n};\n\n/**\n * @deprecated Use `exchangeNpssoForAccessCode` instead. This alias will be removed in a future version.\n */\nexport const exchangeNpssoForCode = exchangeNpssoForAccessCode;\n","import fetch from \"isomorphic-unfetch\";\n\nimport type { AuthTokensResponse } from \"../models\";\nimport { AUTH_BASE_URL } from \"./AUTH_BASE_URL\";\n\nexport const exchangeRefreshTokenForAuthTokens = async (\n  refreshToken: string\n): Promise<AuthTokensResponse> => {\n  const requestUrl = `${AUTH_BASE_URL}/token`;\n\n  const res = await fetch(requestUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization:\n        \"Basic MDk1MTUxNTktNzIzNy00MzcwLTliNDAtMzgwNmU2N2MwODkxOnVjUGprYTV0bnRCMktxc1A=\"\n    },\n    body: new URLSearchParams({\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\",\n      token_format: \"jwt\",\n      scope: \"psn:mobile.v2.core psn:clientapp\"\n    }).toString()\n  });\n\n  const raw = await res.json();\n\n  return {\n    accessToken: raw.access_token,\n    expiresIn: raw.expires_in,\n    idToken: raw.id_token,\n    refreshToken: raw.refresh_token,\n    refreshTokenExpiresIn: raw.refresh_token_expires_in,\n    scope: raw.scope,\n    tokenType: raw.token_type\n  };\n};\n","import fetch from \"isomorphic-unfetch\";\n\nimport type { AuthorizationPayload, CallValidHeaders } from \"../models\";\n\nexport const call = async <T>(\n  config: {\n    url: string;\n    method?: \"GET\" | \"POST\";\n    headers?: CallValidHeaders;\n  },\n  authorization: AuthorizationPayload,\n  bodyPayload?: Record<string, any>\n) => {\n  const response = await fetch(config.url, {\n    method: config?.method ?? \"GET\",\n    headers: {\n      Authorization: `Bearer ${authorization.accessToken}`,\n      \"Content-Type\": \"application/json\",\n      ...config?.headers\n    },\n    body: JSON.stringify(bodyPayload)\n  });\n\n  return (await response.json()) as T;\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  RecentlyPlayedGamesResponse\n} from \"../models\";\nimport { call } from \"../utils/call\";\nimport { GRAPHQL_BASE_URL } from \"./GRAPHQL_BASE_URL\";\nimport { getUserGameListHash } from \"./operationHashes\";\n\ntype GetRecentlyPlayedGamesOptionsCategories = \"ps4_game\" | \"ps5_native_game\";\ntype GetRecentlyPlayedGamesOptions = Pick<AllCallOptions, \"limit\"> & {\n  categories: GetRecentlyPlayedGamesOptionsCategories[];\n};\n\n/**\n * A call to this function will retrieve recently played games for the user associated\n * with the npsso token provided to this module during initialisation.\n *\n * This is useful if you want recent activity that isn't tied to trophy progress.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n */\nexport const getRecentlyPlayedGames = async (\n  authorization: AuthorizationPayload,\n  options: Partial<GetRecentlyPlayedGamesOptions> = {}\n): Promise<RecentlyPlayedGamesResponse> => {\n  const { limit = 50, categories = [\"ps4_game\", \"ps5_native_game\"] } = options;\n\n  const url = new URL(GRAPHQL_BASE_URL);\n\n  url.searchParams.set(\"operationName\", \"getUserGameList\");\n  url.searchParams.set(\n    \"variables\",\n    JSON.stringify({\n      limit,\n      categories: categories.join(\",\")\n    })\n  );\n  url.searchParams.set(\n    \"extensions\",\n    JSON.stringify({\n      persistedQuery: {\n        version: 1,\n        sha256Hash: getUserGameListHash\n      }\n    })\n  );\n\n  const response = await call<RecentlyPlayedGamesResponse>(\n    { url: url.toString() },\n    authorization\n  );\n\n  // The GraphQL queries can return non-truthy values.\n  if (!response.data || !response.data.gameLibraryTitlesRetrieve) {\n    throw new Error(JSON.stringify(response));\n  }\n\n  return response;\n};\n","export const GRAPHQL_BASE_URL =\n  \"https://web.np.playstation.com/api/graphql/v1/op\";\n","/**\n * GraphQL endpoints work differently to others in the codebase.\n *\n * The hashes in this file are reverse engineered from app-<hash>.js file loaded by the page\n * at https://library.playstation.com/recently-played. Following the code in that file leads\n * to some Apollo GraphQL code related to persisted queries. This means the request needs to\n * contain a SHA256 hash of the GraphQL query being executed. Searching for PersistedQueryLink\n * and createPersistedQueryLink_hashes, and an AST function in Sony's JS source and debugging\n * will surface the exact GraphQL query that's passed to the hash function on the page.\n *\n * Thankfully it's easier to figure out future endpoints and hashes by:\n *\n * 1. Visiting a page, e.g https://library.playstation.com/recently-played\n * 2. Using DevTools to find requests to https://web.np.playstation.com/api/graphql/v1/op\n * 3. Decoding the URL parameters to find the correct SHA256 hash and some of the supported parameters\n */\n\n// Hash is computed from the following query (without surrounding quotes):\n// \"query getUserGameList($categories: String, $limit: Int, $orderBy: String, $subscriptionService: SubscriptionService) {\\n  gameLibraryTitlesRetrieve(categories: $categories, limit: $limit, orderBy: $orderBy, subscriptionService: $subscriptionService) {\\n    __typename\\n    games {\\n      __typename\\n      conceptId\\n      entitlementId\\n      image {\\n        __typename\\n        url\\n      }\\n      isActive\\n      lastPlayedDateTime\\n      name\\n      platform\\n      productId\\n      subscriptionService\\n      titleId\\n    }\\n  }\\n}\\n\"\nexport const getUserGameListHash =\n  \"e780a6d8b921ef0c59ec01ea5c5255671272ca0d819edb61320914cf7a78b3ae\";\n","import type { AllCallOptions } from \"../models\";\n\nexport const buildRequestUrl = (\n  baseUrl: string,\n  endpointUrl: string,\n  options: Partial<AllCallOptions> = {},\n  args: Record<string, string | number | boolean> = {}\n) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- This is an intentional pick.\n  const { headerOverrides, ...pickedOptions } = options;\n\n  const concatenated = `${baseUrl}/${endpointUrl}`;\n  const withoutDoubleSlashes = concatenated.replace(/([^:]\\/)\\/+/g, \"$1\");\n\n  let withArgs = withoutDoubleSlashes;\n  const queryParamValues: Record<string, string> = {};\n\n  for (const [argKey, argValue] of Object.entries({\n    ...args,\n    ...pickedOptions\n  })) {\n    if (withArgs.includes(`:${argKey}`)) {\n      withArgs = withArgs.replace(`:${argKey}`, String(argValue));\n    } else if (argValue !== undefined) {\n      queryParamValues[argKey] = String(argValue);\n    }\n  }\n\n  const queryString = new URLSearchParams(queryParamValues).toString();\n  return queryString.length > 0 ? `${withArgs}?${queryString}` : withArgs;\n};\n","import type {\n  AuthorizationPayload,\n  SocialAccountResult,\n  UniversalSearchDomains,\n  UniversalSearchResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { SEARCH_BASE_URL } from \"./SEARCH_BASE_URL\";\n\nexport const makeUniversalSearch = async <R extends UniversalSearchDomains>(\n  authorization: AuthorizationPayload,\n  searchTerm: string,\n  domain: R\n) => {\n  const url = buildRequestUrl(SEARCH_BASE_URL, \"/v1/universalSearch\");\n\n  type AssertType<R> = R extends \"SocialAllAccounts\"\n    ? SocialAccountResult\n    : unknown;\n\n  return await call<UniversalSearchResponse<AssertType<typeof domain>>>(\n    { url, method: \"POST\" },\n    authorization,\n    {\n      searchTerm,\n      domainRequests: [\n        {\n          domain\n        }\n      ]\n    }\n  );\n};\n","export const SEARCH_BASE_URL = \"https://m.np.playstation.com/api/search\";\n","export const TROPHY_BASE_URL = \"https://m.np.playstation.com/api/trophy\";\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  TitleTrophiesResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetTitleTrophiesOptions = Pick<\n  AllCallOptions,\n  \"headerOverrides\" | \"limit\" | \"npServiceName\" | \"offset\"\n>;\n\n/**\n * A call to this function will retrieve the trophy list of a\n * single - or all - trophy groups for a title. A title can have multiple\n * groups of trophies (a `\"default\"` group which all titles have, and additional\n * groups starting with the name `\"001\"` and incrementing for each additional group). To retrieve\n * trophies from all groups within a title (ie. the full trophy set), then\n * `trophyGroupId` should be set to `\"all\"`.\n *\n * When the title platform is PS3, PS4 or PS Vita you __must__ specify the\n * `npServiceName` parameter as `\"trophy\"`.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param npCommunicationId Unique ID of the title.\n * @param trophyGroupId `\"all\"` to return all trophies for the title, otherwise restrict results to a specific trophy group (such as a DLC).\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.limit Limit the number of trophies returned.\n * @param options.offset Return trophy data from this result onwards.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getTitleTrophies = async (\n  authorization: AuthorizationPayload,\n  npCommunicationId: string,\n  trophyGroupId: string,\n  options?: Partial<GetTitleTrophiesOptions>\n): Promise<TitleTrophiesResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/npCommunicationIds/:npCommunicationId/trophyGroups/:trophyGroupId/trophies\",\n    options,\n    { npCommunicationId, trophyGroupId }\n  );\n\n  return await call<TitleTrophiesResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  TitleTrophyGroupsResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetTitleTrophyGroupsOptions = Pick<\n  AllCallOptions,\n  \"npServiceName\" | \"headerOverrides\"\n>;\n\n/**\n * A title may have multiple groups of trophies. This is most commonly\n * seen in games which have DLC expansions where additional trophies are added.\n *\n * You can call this function for a specific title - using the\n * unique `npCommunicationId` for the title - and you will receive a\n * summary of all of the trophy groups associated with the title.\n * This also includes a summary of the number of trophies for the\n * title, broken down by group and grade (gold, silver, etc.).\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param npCommunicationId The unique ID of the game title you wish to retrieve the trophy groups list for.\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getTitleTrophyGroups = async (\n  authorization: AuthorizationPayload,\n  npCommunicationId: string,\n  options?: Partial<GetTitleTrophyGroupsOptions>\n): Promise<TitleTrophyGroupsResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/npCommunicationIds/:npCommunicationId/trophyGroups\",\n    options,\n    { npCommunicationId }\n  );\n\n  return await call<TitleTrophyGroupsResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  UserTitlesResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetUserTitlesOptions = Pick<\n  AllCallOptions,\n  \"headerOverrides\" | \"limit\" | \"offset\"\n>;\n\n/**\n * A call to this function will retrieve a summarized list of titles played\n * by a user, ordered by recent trophy unlocks. The maximum amount that can\n * be returned by a single call is 800 (assuming a `limit` option of 800 is set).\n * If the user has more titles than the given `limit` option, subsequent calls\n * of this funciton must be made to fetch the complete list by paging via the\n * `offset` option.\n *\n * The numeric `accountId` can be that of any PSN account for which the authenticating\n * account has permissions to view the trophy list. When querying the titles\n * associated with the authenticating account, the numeric `accountId` can be\n * substituted with `\"me\"`.\n *\n * To fetch more detailed account progress for a title, the `getUserTrophiesEarnedForTitle()`\n * function can be used.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * Included in the information returned is the titles' unique `npCommunicationId`.\n * This is required to make use of subsequent functions for requesting more specific\n * detail about a title's trophies.\n *\n * The results are presented in order of the `lastUpdatedDateTime` for the title,\n * so the first result will be the title for which a trophy was most recently earned\n * (or synced for the first time in the case of a game with 0% progress).\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param options.limit Limit the number of titles returned.\n * @param options.offset Return title data from this result onwards.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTitles = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: Partial<GetUserTitlesOptions>\n): Promise<UserTitlesResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/trophyTitles\",\n    options,\n    { accountId }\n  );\n\n  return await call<UserTitlesResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  UserTrophiesEarnedForTitleResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetUserTrophiesEarnedForTitleOptions = Pick<\n  AllCallOptions,\n  \"offset\" | \"npServiceName\" | \"limit\" | \"headerOverrides\"\n>;\n\n/**\n * A call to this function will retrieve the earned status of trophies for a user\n * from either a single - or all - trophy groups in a title. A title can have\n * multiple groups of trophies (a `\"default\"` group which all titles have, and\n * additional groups starting with a name of `\"001\"` and incrementing for each\n * additional group). To retrieve trophies from all groups within a title\n * (ie. the full trophy set), then `trophyGroupId` should be set to `\"all\"`.\n *\n * The numeric `accountId` can be that of any PSN account for which the\n * authenticating account has permissions to view the trophy list.\n * When querying the titles associated with the authenticating account, the\n * numeric `accountId` can be substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * This function returns the earned status of the\n * trophy only and no additional descriptive metadata (ie. trophy name,\n * trophy description). Use `getTitleTrophies()` to obtain this information.\n *\n * When the title platform is PS3, PS4, or PS Vita, you __must__ specify the\n * `npServiceName` option as `\"trophy\"`.\n *\n * If you attempt to query a title which the user does not have associated\n * with their account (ie. the title has not been launched and allowed to\n * sync at least once) then a Resource Not Found error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param npCommunicationId Unique ID of the title.\n * @param trophyGroupId `\"all\"` to return all trophies for the title, otherwise restrict results to a specific trophy group (such as a DLC).\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.limit Limit the number of trophies returned.\n * @param options.offset Return trophy data from this result onwards.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTrophiesEarnedForTitle = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  npCommunicationId: string,\n  trophyGroupId: string,\n  options?: Partial<GetUserTrophiesEarnedForTitleOptions>\n): Promise<UserTrophiesEarnedForTitleResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/npCommunicationIds/:npCommunicationId/trophyGroups/:trophyGroupId/trophies\",\n    options,\n    { accountId, npCommunicationId, trophyGroupId }\n  );\n\n  const response = await call<UserTrophiesEarnedForTitleResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AuthorizationPayload,\n  CallValidHeaders,\n  UserTrophiesBySpecificTitleResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ninterface GetUserTrophiesForSpecificTitleOptions {\n  npTitleIds: string;\n  includeNotEarnedTrophyIds?: boolean;\n  headerOverrides?: CallValidHeaders;\n}\n\n/**\n * A call to this function will retrieve a summary of the trophies earned by\n * a user for specific titles.\n *\n * This function can be used as a way of linking the npCommunicationId of\n * a Trophy Set to a titles npTitleId,but as with the other user based endpoints\n * in this version of the API you will only get a useful response back if the account\n * you are querying against has played the title.\n *\n * If you attempt to query a title ID which does not exist then a Resource not found error will be returned.\n *\n * There is a limit of 5 title IDs which can be included in the npTitleIds query.\n * Trying to include more than 5 will result in a Bad Request (query: npTitleId) error being returned.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param options.npTitleIds The titleId can be a single title ID, or it can be a comma separated list of title IDs (%2C when used in a URL). Every title has an ID assigned to it with these typically starting \"CUSA\" for PS4 titles and \"PPSA\" for PS5 titles.\n * @param options.includeNotEarnedTrophyIds If optional parameter includeNotEarnedTrophyIds is included and set to true then the response will contain a list of IDs for the individual trophies which the user has not earned for each title ID queried. This functionality was added to the endpoint post release, most likely early 2023.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTrophiesForSpecificTitle = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options: GetUserTrophiesForSpecificTitleOptions\n): Promise<UserTrophiesBySpecificTitleResponse> => {\n  const { headerOverrides, ...args } = options;\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/titles/trophyTitles\",\n    {},\n    { accountId, ...args }\n  );\n\n  return await call<UserTrophiesBySpecificTitleResponse>(\n    { url, headers: headerOverrides },\n    authorization\n  );\n};\n","import type {\n  AuthorizationPayload,\n  CallValidHeaders,\n  UserTrophyGroupEarningsForTitleResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ninterface GetUserTrophyGroupEarningsForTitleOptions {\n  /**\n   * Not required unless the platform is PS3, PS4, or PS Vita.\n   * If one of these platforms, the value __must__ be `\"trophy\"`.\n   *\n   * `\"trophy\"` for PS3, PS4, or PS Vita platforms.\n   * `\"trophy2\"` for the PS5 platform.\n   */\n  npServiceName: \"trophy\" | \"trophy2\";\n\n  /*\n   * Override the headers in the request to the PSN API,\n   * such as to change the language.\n   */\n  headerOverrides: CallValidHeaders;\n}\n\n/**\n * A request to this endpoint function will retrieve a summary of the trophies earned for\n * a user broken down by trophy group within a title. A title can have\n * multiple groups of trophies (a `\"default\"` group which all titles have,\n * and additional groups beginning with the name `\"001\"` and incrementing for\n * each additional group).\n *\n * The numeric `accountId` can be that of any PSN account for which the\n * authenticating account has permissions to view the trophy list.\n * When querying the titles associated with the authenticating account, the\n * numeric `accountId` can be substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * This function calls an endpoint that returns the earned status of the\n * trophy only and no additional descriptive metadata (ie. trophy name,\n * trophy description). Use `getTitleTrophies()` to obtain this information.\n *\n *  When the title platform is PS3, PS4 or PS Vita you __must__ specify the\n * `npServiceName` option as `\"trophy\"`.\n *\n * If you attempt to query a title which the user does not have associated\n * with their account (ie. the title has not been launched and allowed to\n * sync at least once) then a Resource Not Found error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param npCommunicationId Unique ID of the title.\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTrophyGroupEarningsForTitle = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  npCommunicationId: string,\n  options?: Partial<GetUserTrophyGroupEarningsForTitleOptions>\n): Promise<UserTrophyGroupEarningsForTitleResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/npCommunicationIds/:npCommunicationId/trophyGroups\",\n    options,\n    { accountId, npCommunicationId }\n  );\n\n  const response = await call<UserTrophyGroupEarningsForTitleResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  UserTrophyProfileSummaryResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetUserTrophyProfileSummaryOptions = Pick<\n  AllCallOptions,\n  \"headerOverrides\"\n>;\n\n/**\n * A call to this function will retrieve an overall summary of the number of\n * trophies earned for a user broken down by grade, as well as their current\n * overall trophy level, progress towards the next level, and which tier their\n * current level falls in to. The tiers are based on the [level changes introduced in 2020](https://andshrew.github.io/PlayStation-Trophies/images/psn-trophy-tiers.png).\n *\n * The numeric `accountId` can be that of any PSN account for which the\n * authenticating account has permissions to view the trophy list.\n * When querying the titles associated with the authenticating account, the\n * numeric `accountId` can be substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTrophyProfileSummary = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: Partial<GetUserTrophyProfileSummaryOptions>\n): Promise<UserTrophyProfileSummaryResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/trophySummary\",\n    options,\n    { accountId }\n  );\n\n  return await call<UserTrophyProfileSummaryResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","export const USER_BASE_URL =\n  \"https://m.np.playstation.com/api/userProfile/v1/internal/users\";\n\nexport const USER_GAMES_BASE_URL =\n  \"https://m.np.playstation.com/api/gamelist/v2/users\";\n\nexport const USER_LEGACY_BASE_URL =\n  \"https://us-prof.np.community.playstation.net/userProfile/v1/users\";\n\nexport const USER_CPSS_BASE_URL = \"https://m.np.playstation.com/api/cpss\";\n\nexport const USER_DMS_BASE_URL = \"https://dms.api.playstation.com/api\";\n","import type {\n  AccountDevicesResponse,\n  AllCallOptions,\n  AuthorizationPayload\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_DMS_BASE_URL } from \"./USER_BASE_URL\";\n\ntype GetAccountDevicesOptions = Pick<AllCallOptions, \"headerOverrides\">;\n\n/**\n * A call to this function will retrieve the list of devices the client is logged into.\n * This includes information about PlayStation consoles (PS5, PS4, PS3) and handheld\n * devices (PSVita) that are associated with the account.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param options Optional - Additional headerOverride options to provide for the request\n */\nexport const getAccountDevices = async (\n  authorization: AuthorizationPayload,\n  options?: GetAccountDevicesOptions\n): Promise<AccountDevicesResponse> => {\n  const queryParams = {\n    includeFields: \"device,systemData\",\n    platform: \"PS5,PS4,PS3,PSVita\"\n  };\n\n  const url = buildRequestUrl(\n    USER_DMS_BASE_URL,\n    \"/v1/devices/accounts/:accountId\",\n    { ...options, ...queryParams },\n    {\n      accountId: \"me\" // 'me' is used to refer to the authenticated user's account\n    }\n  );\n\n  const response = await call<AccountDevicesResponse>({ url }, authorization);\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  BasicPresenceResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_BASE_URL } from \"./USER_BASE_URL\";\n\ntype GetBasicPresenceOptions = Pick<AllCallOptions, \"headerOverrides\">;\n\n/**\n * A call to this function will retrieve the basic presence information of the accountId being requested.\n * If the account's profile cannot be found (either due to non-existence or privacy settings),\n * an error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param accountId The accountId for the user you wish to retrieve a profile for.\n * @param options Optional - Additional headerOverride options to provide for the request\n */\nexport const getBasicPresence = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: GetBasicPresenceOptions\n): Promise<BasicPresenceResponse> => {\n  const url = buildRequestUrl(\n    USER_BASE_URL,\n    \"/:accountId/basicPresences?type=primary\",\n    options,\n    {\n      accountId\n    }\n  );\n\n  const response = await call<BasicPresenceResponse>({ url }, authorization);\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  ProfileFromAccountIdResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_BASE_URL } from \"./USER_BASE_URL\";\n\ntype GetProfileFromAccountIdOptions = Pick<AllCallOptions, \"headerOverrides\">;\n\n/**\n * A call to this function will retrieve some profile information of the accountId being requested.\n * If the account's profile cannot be found (either due to non-existence or privacy settings),\n * an error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param accountId The accountId for the user you wish to retrieve a profile for.\n */\nexport const getProfileFromAccountId = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: GetProfileFromAccountIdOptions\n): Promise<ProfileFromAccountIdResponse> => {\n  const url = buildRequestUrl(USER_BASE_URL, \"/:accountId/profiles\", options, {\n    accountId\n  });\n  const response = await call<ProfileFromAccountIdResponse>(\n    { url },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AuthorizationPayload,\n  ProfileFromUserNameResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_LEGACY_BASE_URL } from \"./USER_BASE_URL\";\n\n/**\n * A call to this function will retrieve the profile of the username being requested.\n * If the user cannot be found (either due to non-existence or privacy settings),\n * an error will be thrown.\n *\n * This is a legacy API endpoint function. If you are just trying to get a user's\n * account ID, [`makeUniversalSearch()`](https://psn-api.achievements.app/api-docs/universal-search#makeuniversalsearch)\n * is recommended instead. This endpoint is here because it can return interesting\n * presence information when the user is playing on a legacy console such as a PS3.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param userName The username for the user you wish to retrieve a profile for.\n */\nexport const getProfileFromUserName = async (\n  authorization: AuthorizationPayload,\n  userName: string\n): Promise<ProfileFromUserNameResponse> => {\n  const basicFields =\n    \"npId,onlineId,accountId,avatarUrls,plus,aboutMe,languagesUsed\";\n  const trophyFields = \"trophySummary(@default,level,progress,earnedTrophies)\";\n  const profileFields =\n    \"isOfficiallyVerified,personalDetail(@default,profilePictureUrls),personalDetailSharing,personalDetailSharingRequestMessageFlag\";\n  const statusFields =\n    \"primaryOnlineStatus,presences(@default,@titleInfo,platform,lastOnlineDate,hasBroadcastData)\";\n  const socialFields =\n    \"requestMessageFlag,blocking,friendRelation,following,consoleAvailability\";\n\n  const fields = [\n    basicFields,\n    trophyFields,\n    profileFields,\n    statusFields,\n    socialFields\n  ].join(\",\");\n\n  const url = buildRequestUrl(\n    USER_LEGACY_BASE_URL,\n    \":userName/profile2\",\n    {},\n    {\n      userName,\n      fields\n    }\n  );\n\n  const response = await call<ProfileFromUserNameResponse>(\n    { url },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AuthorizationPayload,\n  ShareableProfileLinkResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_CPSS_BASE_URL } from \"./USER_BASE_URL\";\n\n/**\n * A call to this function will retrieve a shareable link and QR code for a PlayStation Network user's profile.\n * The shareable link allows others to view the user's public profile information, and the QR code provides\n * a convenient way to share the profile via scanning.\n *\n * If the user's profile cannot be found or accessed,\n * an error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param accountId The account ID for the user whose shareable profile link you want to retrieve.\n */\nexport const getProfileShareableLink = async (\n  authorization: AuthorizationPayload,\n  accountId: string\n): Promise<ShareableProfileLinkResponse> => {\n  const url = buildRequestUrl(\n    USER_CPSS_BASE_URL,\n    \"/v1/share/profile/:accountId\",\n    {},\n    {\n      accountId\n    }\n  );\n\n  const response = await call<ShareableProfileLinkResponse>(\n    { url },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  GetUserFriendsAccountIdsResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_BASE_URL } from \"./USER_BASE_URL\";\n\ntype GetUserFriendsAccountIdsOptions = Pick<AllCallOptions, \"limit\" | \"offset\">;\n\n/**\n * A call to this function will retrieve the list of friended `accountId` values\n * associated with the given `accountId` parameter. If the user cannot be found\n * (either due to non-existence or privacy settings), an error will be thrown.\n *\n *  To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n */\nexport const getUserFriendsAccountIds = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: Partial<GetUserFriendsAccountIdsOptions>\n): Promise<GetUserFriendsAccountIdsResponse> => {\n  const url = buildRequestUrl(USER_BASE_URL, \"/:accountId/friends\", options, {\n    accountId\n  });\n\n  const response = await call<GetUserFriendsAccountIdsResponse>(\n    { url },\n    authorization\n  );\n\n  // If you are unable to access the user's friends list, a\n  // \"Not permitted by access control\" error will be thrown.\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import { AllCallOptions, AuthorizationPayload } from \"../models\";\nimport { UserPlayedGamesResponse } from \"../models/user-played-games-response.model\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_GAMES_BASE_URL } from \"./USER_BASE_URL\";\n\ninterface GetUserGamesOptions extends Pick<AllCallOptions, \"limit\" | \"offset\"> {\n  /**\n   * Comma separated list of platforms\n   * @example ps4_game,ps5_native_game, pspc_game, unknown\n   */\n  categories?: string;\n}\n\n/**\n * A call to this function will return a list of played games associated with the given accountId.\n * The list is sorted by recently played by default.\n * If the list cannot be found (either due to non-existence or privacy settings), an error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param accountId The account id to be queried. Use `\"me\"` for the authenticating account.\n */\nexport async function getUserPlayedGames(\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: GetUserGamesOptions\n): Promise<UserPlayedGamesResponse> {\n  const url = buildRequestUrl(\n    USER_GAMES_BASE_URL,\n    \"/:accountId/titles\",\n    options,\n    {\n      accountId\n    }\n  );\n\n  const response = await call<UserPlayedGamesResponse>({ url }, authorization);\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n}\n","import { RegionCode } from \"../models\";\nimport { decodeBase64 } from \"./decodeBase64\";\n\n/**\n * Extracts the region code from a base64-encoded NPID string and returns the region code.\n *\n * @param npId The base64-encoded NPID string, which is decoded to extract the region code.\n * @returns The ISO 3166-1 alpha-2 region code (e.g., \"US\", \"JP\", \"GB\") as a RegionCode,\n * or null if extraction fails or the NPID is invalid.\n *\n * This function assumes a valid NPID format (e.g., \"VaultTec-Co@b7.us\"). It splits the string to get\n * the region code (e.g., \"us\"), which is then returned as uppercase.\n */\nexport const extractRegionFromNpId = (npId: string): RegionCode | null => {\n  if (!npId) {\n    return null;\n  }\n\n  try {\n    // Decode the base64-encoded NPID\n    // Note: Buffer is Node.js specific. For cross-platform (browser/Node)\n    // consider alternatives if needed, though NPID format might be ASCII-safe for atob.\n    const decodedNpId = decodeBase64(npId);\n\n    // Assuming a decoded npid format (e.g. VaultTec-Co@b7.us), extract the region part.\n    if (decodedNpId.includes(\"@\") && decodedNpId.includes(\".\")) {\n      const parts = decodedNpId.split(\".\");\n      const regionCandidate = parts.pop(); // Get the last part, which should be the region\n\n      // Validate that the candidate is a two-letter alphabetic string\n      if (\n        regionCandidate &&\n        regionCandidate.length === 2 &&\n        /^[A-Za-z]+$/.test(regionCandidate)\n      ) {\n        return regionCandidate.toUpperCase() as RegionCode; // Return as uppercase RegionCode\n      }\n    }\n\n    return null; // Return null if format is not as expected or validation fails\n  } catch (error) {\n    // Catch errors from base64 decoding or other unexpected issues\n    console.error(\"Failed to extract region from NPID:\", error);\n    return null;\n  }\n};\n","/**\n * Cross-platform base64 decoding function\n */\nexport function decodeBase64(base64String: string): string {\n  try {\n    if (typeof window !== \"undefined\" && typeof window.atob === \"function\") {\n      return window.atob(base64String); // Browser decoding\n    } else if (typeof Buffer !== \"undefined\") {\n      return Buffer.from(base64String, \"base64\").toString(\"utf8\"); // Node.js decoding\n    } else {\n      throw new TypeError(\"Base64 decoding unsupported in this environment\");\n    }\n  } catch (error) {\n    throw new Error(`Base64 decoding error: ${error}`);\n  }\n}\n","import type {\n  AuthorizationPayload,\n  RegionCode,\n  UserRegionInfo\n} from \"../models\";\nimport { extractRegionFromNpId } from \"../utils/extractRegionFromNpId\";\nimport { getProfileFromUserName } from \"./getProfileFromUserName\";\n\n/**\n * Retrieves the region of a PlayStation Network user based on their username.\n *\n * This function uses the npId from the user's profile to determine their region.\n * The region is extracted from the base64-encoded npId and returned as an object\n * containing both the two-letter country code (ISO 3166-1 alpha-2) and the full\n * country name.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeAccessCodeForAuthTokens()`.\n * @param userName The username for the user whose region you want to determine.\n * @param locales Optional. A string with a BCP 47 language tag, or an array of such strings.\n *                Defaults to ['en'] (English) if not specified.\n * @returns A promise that resolves to a RegionInfo object with the country code and name, or null if the region cannot be determined.\n *\n * @throws Will throw an error if the user cannot be found or if there are any issues accessing the profile.\n */\nexport const getUserRegion = async (\n  authorization: AuthorizationPayload,\n  userName: string,\n  locales: Intl.LocalesArgument = [\"en\"]\n): Promise<UserRegionInfo | null> => {\n  const profileData = await getProfileFromUserName(authorization, userName);\n\n  const npId = profileData?.profile?.npId;\n  if (!npId) {\n    // User profile not found, or npId is missing\n    return null;\n  }\n\n  const regionCode: RegionCode | null = extractRegionFromNpId(npId);\n\n  if (!regionCode) {\n    // Region could not be determined from the npId\n    return null;\n  }\n  try {\n    // Use Intl.DisplayNames to get the region name in the specified locale\n    const regionNames = new Intl.DisplayNames(locales, { type: \"region\" });\n    const regionName = regionNames.of(regionCode); // `of` expects a string region code\n\n    return {\n      code: regionCode,\n      name: regionName\n    };\n  } catch {\n    // If Intl.DisplayNames fails, return just the code with an unknown name\n    return {\n      code: regionCode,\n      name: \"Unknown\"\n    };\n  }\n};\n"],"names":["TrophyRarity","exchangeAccessCodeForAuthTokens","_ref","_asyncToGenerator","_regeneratorRuntime","mark","accessCode","res","raw","wrap","_context","prev","next","fetch","AUTH_BASE_URL","method","headers","Authorization","body","URLSearchParams","code","redirect_uri","grant_type","token_format","toString","sent","json","abrupt","accessToken","access_token","expiresIn","expires_in","idToken","id_token","refreshToken","refresh_token","refreshTokenExpiresIn","refresh_token_expires_in","scope","tokenType","token_type","stop","_callee","_x","apply","this","arguments","exchangeCodeForAccessToken","exchangeNpssoForAccessCode","npssoToken","_responseHeaders$get","queryString","requestUrl","responseHeaders","redirectLocation","redirectParams","access_type","client_id","response_type","Cookie","redirect","has","get","includes","Error","split","exchangeNpssoForCode","exchangeRefreshTokenForAuthTokens","call","config","authorization","bodyPayload","_config$method","response","url","_extends","JSON","stringify","_x2","_x3","getRecentlyPlayedGames","options","_options","_options$limit","limit","_options$categories","categories","URL","searchParams","set","join","persistedQuery","version","sha256Hash","data","gameLibraryTitlesRetrieve","buildRequestUrl","baseUrl","endpointUrl","args","pickedOptions","_objectWithoutPropertiesLoose","_excluded","withArgs","replace","queryParamValues","Object","entries","_i","_Object$entries","length","_Object$entries$_i","argKey","argValue","String","undefined","makeUniversalSearch","searchTerm","domain","domainRequests","TROPHY_BASE_URL","getTitleTrophies","npCommunicationId","trophyGroupId","headerOverrides","_x4","getTitleTrophyGroups","getUserTitles","accountId","getUserTrophiesEarnedForTitle","_response$error$messa","_response$error","error","message","_x5","getUserTrophiesForSpecificTitle","getUserTrophyGroupEarningsForTitle","getUserTrophyProfileSummary","USER_BASE_URL","getAccountDevices","includeFields","platform","getBasicPresence","getProfileFromAccountId","getProfileFromUserName","userName","fields","getProfileShareableLink","getUserFriendsAccountIds","_getUserPlayedGames","extractRegionFromNpId","npId","decodedNpId","base64String","window","atob","Buffer","from","TypeError","decodeBase64","regionCandidate","pop","test","toUpperCase","console","getUserRegion","locales","_profileData$profile","profileData","regionCode","regionNames","regionName","profile","Intl","DisplayNames","type","of","name","t0"],"mappings":"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"}